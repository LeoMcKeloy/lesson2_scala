[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\lpyryanov\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\lpyryanov\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.7.3 (BellSoft Java 17.0.4)
[debug]       Load.loadUnit: plugins took 197.4564ms
[debug]       Load.loadUnit: defsScala took 0.4412ms
[debug] [Loading] Scanning directory C:\Users\lpyryanov\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\lpyryanov\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 32.9363 ms
[debug]           Load.resolveProject(global-plugins) took 82.5794ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\lpyryanov\.sbt\1.0\plugins, plugins: List(<none>))) took 153.539ms
[debug] [Loading] Done in C:\Users\lpyryanov\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 207.497ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.2856ms
[debug]     Load.loadUnit(file:/C:/Users/lpyryanov/.sbt/1.0/plugins/, ...) took 426.9677ms
[debug]   Load.apply: load took 722.7252ms
[debug]   Load.apply: resolveProjects took 11.6897ms
[debug]   Load.apply: finalTransforms took 92.8522ms
[debug]   Load.apply: config.delegates took 7.2974ms
[debug]   Load.apply: Def.make(settings)... took 868.999ms
[debug]   Load.apply: structureIndex took 150.1113ms
[debug]   Load.apply: mkStreams took 1.6564ms
[info] loading global plugins from C:\Users\lpyryanov\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 3477.2477ms
[debug]           Load.loadUnit: plugins took 40.4543ms
[debug]           Load.loadUnit: defsScala took 0.0339ms
[debug] [Loading] Scanning directory C:\Users\lpyryanov\IdeaProjects\lesson2_scala\project
[debug]             Load.loadUnit: mkEval took 5.8876ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\lpyryanov\IdeaProjects\lesson2_scala\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 2.3426 ms
[info] loading settings for project lesson2_scala-build from plugins.sbt,idea.sbt ...
[debug]               Load.resolveProject(lesson2_scala-build) took 5.0381ms
[debug]             Load.loadTransitive: finalizeProject(Project(id lesson2_scala-build, base: C:\Users\lpyryanov\IdeaProjects\lesson2_scala\project, plugins: List(<none>))) took 8.3273ms
[debug] [Loading] Done in C:\Users\lpyryanov\IdeaProjects\lesson2_scala\project, returning: (lesson2_scala-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 249.0204ms
[debug]           Load.loadUnit: cleanEvalClasses took 20.0404ms
[debug]         Load.loadUnit(file:/C:/Users/lpyryanov/IdeaProjects/lesson2_scala/project/, ...) took 313.514ms
[debug]       Load.apply: load took 319.2272ms
[debug]       Load.apply: resolveProjects took 0.2423ms
[debug]       Load.apply: finalTransforms took 18.2856ms
[debug]       Load.apply: config.delegates took 0.4255ms
[debug]       Load.apply: Def.make(settings)... took 166.1007ms
[debug]       Load.apply: structureIndex took 61.5039ms
[debug]       Load.apply: mkStreams took 0.0042ms
[info] loading project definition from C:\Users\lpyryanov\IdeaProjects\lesson2_scala\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 1268.2353ms
[debug]     Load.loadUnit: defsScala took 0.0063ms
[debug] [Loading] Scanning directory C:\Users\lpyryanov\IdeaProjects\lesson2_scala
[debug]       Load.loadUnit: mkEval took 1.2724ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\lpyryanov\IdeaProjects\lesson2_scala, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbtassembly.AssemblyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbtassembly.AssemblyPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,sbtassembly.AssemblyPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 13.1719 ms
[info] loading settings for project lesson2_scala from build.sbt ...
[debug]         Load.resolveProject(lesson2_scala) took 169.2168ms
[debug]       Load.loadTransitive: finalizeProject(Project(id lesson2_scala, base: C:\Users\lpyryanov\IdeaProjects\lesson2_scala, plugins: List(<none>))) took 184.8408ms
[debug] [Loading] Done in C:\Users\lpyryanov\IdeaProjects\lesson2_scala, returning: (lesson2_scala)
[debug]     Load.loadUnit: loadedProjectsRaw took 372.7703ms
[debug]     Load.loadUnit: cleanEvalClasses took 20.0043ms
[debug]   Load.loadUnit(file:/C:/Users/lpyryanov/IdeaProjects/lesson2_scala/, ...) took 1663.2469ms
[debug] Load.apply: load took 1668.4756ms
[debug] Load.apply: resolveProjects took 0.3761ms
[debug] Load.apply: finalTransforms took 48.5779ms
[debug] Load.apply: config.delegates took 0.7764ms
[debug] Load.apply: Def.make(settings)... took 251.3384ms
[debug] Load.apply: structureIndex took 72.9009ms
[debug] Load.apply: mkStreams took 0.0047ms
[info] set current project to lesson2_scala (in build file:/C:/Users/lpyryanov/IdeaProjects/lesson2_scala/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 62227 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 62227, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to lesson2_scala (in build file:/C:/Users/lpyryanov/IdeaProjects/lesson2_scala/)
[debug] > Exec(idea-shell, None, None)
